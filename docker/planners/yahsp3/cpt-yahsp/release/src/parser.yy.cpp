#line 2 "/home/stolba/planners/PAH2014_local/yahsp3/cpt-yahsp/release/src/parser.yy.cpp"

#line 4 "/home/stolba/planners/PAH2014_local/yahsp3/cpt-yahsp/release/src/parser.yy.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer pddl__create_buffer
#define yy_delete_buffer pddl__delete_buffer
#define yy_flex_debug pddl__flex_debug
#define yy_init_buffer pddl__init_buffer
#define yy_flush_buffer pddl__flush_buffer
#define yy_load_buffer_state pddl__load_buffer_state
#define yy_switch_to_buffer pddl__switch_to_buffer
#define yyin pddl_in
#define yyleng pddl_leng
#define yylex pddl_lex
#define yylineno pddl_lineno
#define yyout pddl_out
#define yyrestart pddl_restart
#define yytext pddl_text
#define yywrap pddl_wrap
#define yyalloc pddl_alloc
#define yyrealloc pddl_realloc
#define yyfree pddl_free

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE pddl_restart(pddl_in  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int pddl_leng;

extern FILE *pddl_in, *pddl_out;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up pddl_text. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up pddl_text again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via pddl_restart()), so that the user can continue scanning by
	 * just pointing pddl_in at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when pddl_text is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int pddl_leng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow pddl_wrap()'s to do buffer switches
 * instead of setting up a fresh pddl_in.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void pddl_restart (FILE *input_file  );
void pddl__switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE pddl__create_buffer (FILE *file,int size  );
void pddl__delete_buffer (YY_BUFFER_STATE b  );
void pddl__flush_buffer (YY_BUFFER_STATE b  );
void pddl_push_buffer_state (YY_BUFFER_STATE new_buffer  );
void pddl_pop_buffer_state (void );

static void pddl_ensure_buffer_stack (void );
static void pddl__load_buffer_state (void );
static void pddl__init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER pddl__flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE pddl__scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE pddl__scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE pddl__scan_bytes (yyconst char *bytes,int len  );

void *pddl_alloc (yy_size_t  );
void *pddl_realloc (void *,yy_size_t  );
void pddl_free (void *  );

#define yy_new_buffer pddl__create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        pddl_ensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            pddl__create_buffer(pddl_in,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        pddl_ensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            pddl__create_buffer(pddl_in,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define pddl_wrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *pddl_in = (FILE *) 0, *pddl_out = (FILE *) 0;

typedef int yy_state_type;

extern int pddl_lineno;

int pddl_lineno = 1;

extern char *pddl_text;
#define yytext_ptr pddl_text

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up pddl_text.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	pddl_leng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 51
#define YY_END_OF_BUFFER 52
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[246] =
    {   0,
        0,    0,   52,   50,   49,   48,   39,   40,   41,   37,
       35,   50,   50,   38,   46,   50,   47,   30,   27,   31,
       50,   45,   45,   45,   45,   45,   45,   45,   45,   36,
        0,   46,   46,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   47,   28,   29,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   25,   45,    0,
       45,   45,   45,   45,   45,   26,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,

       45,   45,   45,   45,   45,    0,    0,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   11,   12,   45,   45,   45,   45,   45,   45,   45,
       45,   17,   45,    0,    0,   45,   45,   45,   45,   45,
        0,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,    4,   34,   43,    0,
       45,    1,    2,   24,   45,    0,   45,   14,   45,   45,
       45,    9,   45,   22,   45,   13,   45,   45,   45,   45,
       45,   45,    0,   45,   45,    0,    8,   45,   45,   45,
       45,   45,   45,   10,   45,   45,   45,   45,   45,   42,

       33,   32,   44,   45,   45,   45,   18,   45,   45,   45,
       45,   45,   45,   45,   21,    5,   45,   45,    7,   45,
       45,   45,   45,   45,   45,   45,   16,   45,    6,   45,
       45,   23,   45,   45,   45,   45,   45,   20,   45,    3,
       45,   19,   45,   15,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        4,    4,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    1,    1,    1,    1,    5,    1,    6,
        7,    8,    9,    1,   10,   11,   12,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   14,   15,   16,
       17,   18,   19,   20,   21,   22,   23,   24,   25,   26,
       27,   28,   29,   30,   31,   32,   33,   34,   35,   36,
       37,   38,   39,   40,   41,   42,   31,   31,   43,   31,
        1,    1,    1,    1,   20,    1,   44,   45,   46,   47,

       48,   49,   50,   51,   52,   53,   31,   54,   55,   56,
       57,   58,   59,   60,   61,   62,   63,   64,   31,   31,
       65,   31,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[66] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    3,
        1,    1,    3,    1,    1,    1,    1,    1,    1,    3,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4
    } ;

static yyconst flex_int16_t yy_base[250] =
    {   0,
        0,    0,  142, 1332, 1332, 1332, 1332, 1332, 1332, 1332,
     1332,   64,  123, 1332,   58,   57,    0,  114, 1332,  113,
        0,  113,  114,  115,  119,  131,  144,  136,  148, 1332,
       63,   59,   61,  157,  163,  171,  172,  184,  185,  189,
      202,  207,  221,  229,  227,  241,  243,    0, 1332, 1332,
        0,  201,  252,  258,  272,  278,  270,  292,  297,  298,
      303,  320,  316,  324,  329,  337,  353,  351,  373,  379,
      378,  390,  391,  396,  402,  414,  415,  428,  439,  320,
      444,  445,  450,  456,  467,  468,  473,  479,  490,  496,
      502,  508,  524,  528,  543,  545,  549,  551,  557,  569,

      570,  571,  585,  593,  598,  103,   98,  610,  609,  618,
      626,  632,  651,  646,  659,  663,  671,  675,  677,  676,
      688,  692,  693,  711,  722,  710,  716,  724,  728,  742,
      736,  744,  757,  119,  172,  759,  768,  772,  776,  788,
      346,  792,  805,  809,  810,  824,  833,  825,  837,  854,
      859,  863,  871,  883,  172,  882,  884,  888, 1332,  185,
      897,  899,  903,  905,  918,  206,  920,  924,  935,  936,
      941,  953,  958,  964,  970,  976,  978,  984,  989,  998,
      216, 1010,  219, 1018, 1024,  261, 1035, 1040, 1041, 1049,
     1054, 1060, 1066, 1074, 1079, 1085, 1096,  271, 1105, 1332,

     1110, 1111, 1332, 1119, 1130, 1131, 1132, 1136, 1144, 1157,
     1153, 1161,  256, 1172, 1186, 1188, 1190,  325, 1194, 1203,
     1208, 1209,  312, 1221, 1223,  330, 1225, 1234, 1236,  343,
     1248, 1253,  325, 1261,  379, 1262,  353, 1266,  411, 1270,
      438,    0,  474,    0, 1332, 1323,   69, 1325, 1327
    } ;

static yyconst flex_int16_t yy_def[250] =
    {   0,
      245,    1,  245,  245,  245,  245,  245,  245,  245,  245,
      245,  245,  245,  245,  245,  245,  246,  245,  245,  245,
      247,  248,  248,  248,  248,  248,  248,  248,  248,  245,
      245,  245,  245,  248,  248,  248,  248,  248,  248,  248,
      248,  248,  248,  248,  248,  248,  248,  246,  245,  245,
      249,  248,  248,  248,  248,  248,  248,  248,  248,  248,
      248,  248,  248,  248,  248,  248,  248,  248,  248,  248,
      248,  248,  248,  248,  248,  248,  248,  248,  248,  245,
      248,  248,  248,  248,  248,  248,  248,  248,  248,  248,
      248,  248,  248,  248,  248,  248,  248,  248,  248,  248,

      248,  248,  248,  248,  248,  245,  245,  248,  248,  248,
      248,  248,  248,  248,  248,  248,  248,  248,  248,  248,
      248,  248,  248,  248,  248,  248,  248,  248,  248,  248,
      248,  248,  248,  245,  245,  248,  248,  248,  248,  248,
      245,  248,  248,  248,  248,  248,  248,  248,  248,  248,
      248,  248,  248,  248,  249,  248,  248,  248,  245,  245,
      248,  248,  248,  248,  248,  245,  248,  248,  248,  248,
      248,  248,  248,  248,  248,  248,  248,  248,  248,  248,
      249,  248,  245,  248,  248,  245,  248,  248,  248,  248,
      248,  248,  248,  248,  248,  248,  248,  249,  248,  245,

      248,  248,  245,  248,  248,  248,  248,  248,  248,  248,
      248,  248,  249,  248,  248,  248,  248,  249,  248,  248,
      248,  248,  249,  248,  248,  249,  248,  248,  248,  249,
      248,  248,  249,  248,  249,  248,  249,  248,  249,  248,
      249,  249,  249,  249,    0,  245,  245,  245,  245
    } ;

static yyconst flex_int16_t yy_nxt[1398] =
    {   0,
        4,    5,    6,    5,    7,    8,    9,   10,   11,   12,
       13,   14,   15,   16,   17,   18,   19,   20,   21,    4,
       22,   23,   23,   24,   25,   23,   23,   23,   26,   23,
       23,   23,   23,   27,   28,   29,   23,   23,   23,   23,
       23,   23,   23,   22,   23,   23,   24,   25,   23,   23,
       23,   26,   23,   23,   23,   27,   28,   29,   23,   23,
       23,   23,   23,   23,   23,   30,   30,   30,   31,   31,
       32,   32,   35,   33,   31,   33,   32,   34,   35,   36,
       37,   38,   39,   40,   35,   41,   35,   35,   35,   42,
       35,   43,   44,   35,   45,   35,   46,   35,   47,   35,

       34,   35,   36,   37,   38,   39,   40,   35,   41,   35,
       35,   42,   35,   43,   44,   35,   45,   35,   46,   35,
       47,   35,   51,   51,   51,   51,   51,   51,   51,   50,
       49,   51,   51,   51,   51,   33,  134,  135,   51,   56,
       51,  245,  159,   51,  245,   51,   53,   58,   51,   57,
       51,   54,   55,   51,  245,   51,   51,   51,  134,  135,
       51,  245,   56,   51,   59,  159,   51,   51,   53,   51,
       58,   57,   51,   54,   55,   51,   51,   61,   60,   63,
       51,   51,   51,   51,   51,   62,   59,  245,  245,  245,
       51,   51,  160,   51,   51,  181,   51,   51,   51,   61,

       60,   51,   63,   51,   51,   64,   65,   62,   51,   67,
       51,   51,   66,   51,   51,  160,   51,  245,  181,   51,
       51,   51,  183,   69,  245,   68,   51,   64,   65,  245,
       51,   71,   67,   51,   66,   70,   51,  186,   51,   51,
       51,   51,   72,  245,  183,   69,   51,   68,   51,   73,
       51,   75,   51,   51,   71,   51,  198,   70,  200,  186,
       51,   51,   51,   77,   51,   72,   74,   51,  245,  245,
       51,   51,   73,   80,   75,   78,  223,   51,  198,   51,
      200,   51,   51,   76,   51,  245,   77,   51,   74,   51,
       51,   51,  203,  245,  245,  245,   79,   51,   78,  223,

       81,   51,   83,   82,   51,   76,   51,   51,  213,   51,
       51,   51,   51,  245,  203,   51,   51,   51,   79,   85,
      245,   80,   51,   81,   83,   51,   82,   87,   51,   51,
      213,   84,   51,   51,  245,   51,   51,   86,   51,   51,
      245,   51,   85,   51,  106,  226,   51,  141,   51,   51,
       87,  230,  233,   84,   88,   89,   51,   90,  107,   86,
       51,   91,   51,   51,  237,   51,  166,  106,  226,  245,
       51,  235,   51,  230,   92,  233,   88,   89,   93,   90,
      107,  241,   51,   91,   94,   51,  237,   51,   51,  166,
       51,   51,   51,   95,  235,  245,   92,   51,   51,   51,

       51,   93,   51,   51,  241,   51,   94,   96,   51,   51,
       51,   51,  245,  239,   51,   51,   95,   97,  245,   98,
      100,   51,  101,   51,   51,  245,   51,   51,   99,  245,
       96,  245,  245,   51,   51,  239,  245,   51,  102,   97,
       51,  245,   98,  100,  242,  101,  245,   51,   51,  103,
       99,   51,  104,   51,   51,  245,   51,   51,   51,   51,
      102,  245,   51,   51,   51,   51,  242,  105,   51,   51,
      110,  103,  243,  109,  104,   51,   51,   51,  245,   51,
       51,  108,   51,  111,  245,   51,   51,   51,   51,  245,
      105,   51,   51,  110,  243,  245,  109,  245,   51,   51,

      114,  245,   51,  108,  112,   51,  111,  244,   51,   51,
      113,   51,  245,  245,   51,   51,  245,   51,  115,  116,
       51,   51,  118,  114,  245,  245,  112,   51,  119,  244,
      245,  245,  113,   51,  117,  245,   51,   51,  245,  245,
       51,  115,  116,   51,  245,  118,  245,   51,  120,  245,
      121,  119,   51,  245,   51,   51,  117,   51,   51,  245,
       51,   51,   51,   51,   51,  245,   51,  245,   51,   51,
       51,  120,  245,  121,  122,  125,   51,  126,   51,   51,
       51,   51,   51,   51,  123,  245,  124,  245,   51,   51,
       51,  127,  128,  245,   51,  245,  122,   51,  125,  245,

      126,  129,   51,  245,   51,   51,  123,   51,  124,  131,
       51,  130,   51,  245,  127,  128,  245,   51,   51,   51,
      245,   51,   51,  129,  133,  245,  245,   51,   51,   51,
       51,  132,  131,  130,  136,   51,  245,   51,   51,  245,
      245,   51,  137,  245,   51,   51,  138,  133,  245,  245,
      139,   51,  141,  132,  245,   51,  140,  136,   51,  245,
       51,  245,  245,   51,  137,   51,  245,  245,   51,  138,
       51,   51,   51,  139,  245,   51,  245,  142,   51,  140,
       51,  245,   51,   51,   51,   51,   51,   51,   51,   51,
       51,  144,  245,  143,   51,   51,   51,   51,  148,  142,

       51,   51,   51,  146,   51,   51,  245,   51,  245,  245,
      145,   51,   51,  245,  144,  143,  147,  245,  245,   51,
       51,  148,   51,   51,  245,   51,  146,  149,   51,   51,
       51,   51,  145,   51,   51,   51,   51,  155,  147,  150,
       51,   51,  152,   51,  151,   51,  245,   51,   51,  149,
      153,   51,  154,   51,   51,   51,   51,  245,  245,  245,
      245,   51,  150,   51,  152,  245,   51,  151,   51,   51,
      156,   51,  153,  245,  157,  154,   51,   51,   51,  161,
       51,   51,  245,  245,   51,   51,  245,   51,   51,  245,
      158,   51,  162,  156,  245,   51,  157,   51,  245,  245,

       51,   51,  161,  245,   51,  163,  245,   51,  165,  245,
      245,   51,  158,  164,   51,  162,  167,   51,   51,   51,
      245,   51,   51,  245,   51,  245,  245,  163,   51,   51,
      170,  165,  245,   51,   51,  164,   51,   51,  168,  167,
      245,  245,   51,   51,   51,   51,   51,  171,  169,   51,
      245,  245,   51,  170,  245,  245,   51,  172,  245,  245,
      168,  173,  245,   51,  174,  175,   51,  245,   51,  171,
      169,   51,   51,   51,  245,   51,  176,  245,   51,  172,
       51,  245,   51,   51,  173,  245,  174,  178,  175,  245,
       51,   51,   51,   51,   51,   51,   51,   51,  177,  176,

       51,   51,   51,   51,  179,  180,   51,   51,   51,   51,
      178,   51,   51,  245,   51,   51,   51,   51,   51,  182,
      177,  245,   51,  245,   51,  245,  179,   51,  180,   51,
       51,  245,   51,   51,  245,  184,   51,   51,  245,   51,
      245,  182,  245,   51,   51,   51,  245,   51,   51,  245,
       51,  245,  187,   51,   51,   51,  185,  184,  245,  245,
       51,  190,   51,  188,  245,   51,  245,   51,  245,  189,
       51,  245,   51,   51,  187,  245,   51,   51,  185,   51,
      245,  245,   51,   51,  190,   51,  188,   51,   51,   51,
       51,  189,  191,   51,  245,   51,   51,   51,   51,  192,

      245,   51,  245,   51,  193,  245,  245,   51,   51,  245,
       51,  245,  196,  245,  191,  245,  194,   51,  197,   51,
      245,  192,   51,  195,  245,  245,  193,   51,  245,   51,
       51,  245,  245,   51,  199,  196,   51,   51,  194,  245,
      245,  197,  201,   51,   51,  195,  245,   51,  202,   51,
       51,  245,   51,   51,   51,  245,  245,  199,   51,   51,
       51,   51,  245,   51,  245,  201,   51,  245,   51,   51,
      245,  202,   51,   51,  204,   51,  245,  206,   51,   51,
      205,  245,  245,   51,  208,   51,   51,  207,   51,  245,
      245,   51,  245,   51,   51,  245,  204,   51,   51,  209,

      206,  245,  205,  210,   51,   51,  245,  208,   51,  207,
      245,  245,  245,  211,   51,   51,  245,   51,  245,   51,
       51,  209,   51,   51,   51,  245,  210,  245,   51,   51,
       51,   51,  245,  245,  245,  212,  211,  214,   51,   51,
       51,   51,   51,   51,   51,  218,  245,  245,   51,   51,
       51,   51,  215,   51,  245,   51,   51,  212,  245,  214,
      245,  245,   51,   51,  217,   51,   51,  245,  216,   51,
       51,  245,   51,   51,  215,  245,   51,  245,  245,  245,
       51,   51,  219,  245,   51,  222,  217,  245,  245,  245,
      216,   51,  221,  245,  220,   51,  224,   51,   51,   51,

       51,  245,   51,   51,  219,   51,   51,   51,  222,   51,
      245,  245,   51,   51,  221,   51,  220,   51,   51,  224,
       51,   51,   51,  245,  245,  245,  245,   51,   51,  225,
       51,  245,   51,   51,   51,   51,  228,   51,  245,  245,
       51,  227,   51,   51,   51,   51,   51,  229,   51,  245,
      245,  225,  245,   51,  231,   51,  245,   51,  245,  228,
       51,  232,   51,  227,  245,   51,  245,   51,  234,  229,
       51,   51,   51,   51,   51,   51,  231,  245,   51,   51,
       51,   51,   51,  232,  245,   51,  245,  236,  245,   51,
      234,  245,  245,  245,  238,  245,  245,  245,  245,  245,

      240,  245,  245,  245,  245,  245,  245,  245,  245,  236,
      245,  245,  245,  245,  245,  245,  238,  245,  245,  245,
      245,  245,  240,   48,  245,   48,   48,   52,   52,   51,
       51,    3,  245,  245,  245,  245,  245,  245,  245,  245,
      245,  245,  245,  245,  245,  245,  245,  245,  245,  245,
      245,  245,  245,  245,  245,  245,  245,  245,  245,  245,
      245,  245,  245,  245,  245,  245,  245,  245,  245,  245,
      245,  245,  245,  245,  245,  245,  245,  245,  245,  245,
      245,  245,  245,  245,  245,  245,  245,  245,  245,  245,
      245,  245,  245,  245,  245,  245,  245

    } ;

static yyconst flex_int16_t yy_chk[1398] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,   12,   12,   12,   15,   32,
       15,   32,  247,   33,   12,   31,   12,   16,   16,   16,
       16,   16,   16,   16,   16,   16,   16,   16,   16,   16,
       16,   16,   16,   16,   16,   16,   16,   16,   16,   16,

       16,   16,   16,   16,   16,   16,   16,   16,   16,   16,
       16,   16,   16,   16,   16,   16,   16,   16,   16,   16,
       16,   16,   22,   23,   24,   22,   23,   24,   25,   20,
       18,   25,   22,   23,   24,   13,  106,  107,   25,   24,
       26,    3,  134,   26,    0,   28,   22,   25,   28,   24,
       26,   22,   22,   27,    0,   28,   27,   29,  106,  107,
       29,    0,   24,   27,   26,  134,   34,   29,   22,   34,
       25,   24,   35,   22,   22,   35,   34,   28,   27,   34,
       36,   37,   35,   36,   37,   29,   26,    0,    0,    0,
       36,   37,  135,   38,   39,  155,   38,   39,   40,   28,

       27,   40,   34,   38,   39,   36,   37,   29,   40,   38,
       52,   41,   37,   52,   41,  135,   42,    0,  155,   42,
       52,   41,  160,   40,    0,   39,   42,   36,   37,    0,
       43,   42,   38,   43,   37,   41,   45,  166,   44,   45,
       43,   44,   43,    0,  160,   40,   45,   39,   44,   44,
       46,   45,   47,   46,   42,   47,  181,   41,  183,  166,
       46,   53,   47,   47,   53,   43,   44,   54,    0,    0,
       54,   53,   44,   55,   45,   53,  213,   54,  181,   57,
      183,   55,   57,   46,   55,    0,   47,   56,   44,   57,
       56,   55,  186,    0,    0,    0,   54,   56,   53,  213,

       56,   58,   57,   56,   58,   46,   59,   60,  198,   59,
       60,   58,   61,    0,  186,   61,   59,   60,   54,   59,
        0,   80,   61,   56,   57,   63,   56,   61,   63,   62,
      198,   58,   62,   64,    0,   63,   64,   60,   65,   62,
        0,   65,   59,   64,   80,  218,   66,  141,   65,   66,
       61,  223,  226,   58,   62,   63,   66,   64,   80,   60,
       68,   65,   67,   68,  233,   67,  141,   80,  218,    0,
       68,  230,   67,  223,   66,  226,   62,   63,   67,   64,
       80,  237,   69,   65,   68,   69,  233,   71,   70,  141,
       71,   70,   69,   69,  230,    0,   66,   71,   70,   72,

       73,   67,   72,   73,  237,   74,   68,   70,   74,   72,
       73,   75,    0,  235,   75,   74,   69,   71,    0,   72,
       74,   75,   75,   76,   77,    0,   76,   77,   73,    0,
       70,    0,    0,   76,   77,  235,    0,   78,   75,   71,
       78,    0,   72,   74,  239,   75,    0,   78,   79,   76,
       73,   79,   77,   81,   82,    0,   81,   82,   79,   83,
       75,    0,   83,   81,   82,   84,  239,   79,   84,   83,
       83,   76,  241,   82,   77,   84,   85,   86,    0,   85,
       86,   81,   87,   84,    0,   87,   85,   86,   88,    0,
       79,   88,   87,   83,  241,    0,   82,    0,   88,   89,

       88,    0,   89,   81,   85,   90,   84,  243,   90,   89,
       87,   91,    0,    0,   91,   90,    0,   92,   89,   90,
       92,   91,   91,   88,    0,    0,   85,   92,   92,  243,
        0,    0,   87,   93,   90,    0,   93,   94,    0,    0,
       94,   89,   90,   93,    0,   91,    0,   94,   93,    0,
       94,   92,   95,    0,   96,   95,   90,   96,   97,    0,
       98,   97,   95,   98,   96,    0,   99,    0,   97,   99,
       98,   93,    0,   94,   95,   98,   99,   99,  100,  101,
      102,  100,  101,  102,   96,    0,   97,    0,  100,  101,
      102,  100,  100,    0,  103,    0,   95,  103,   98,    0,

       99,  101,  104,    0,  103,  104,   96,  105,   97,  103,
      105,  102,  104,    0,  100,  100,    0,  105,  109,  108,
        0,  109,  108,  101,  105,    0,    0,  110,  109,  108,
      110,  104,  103,  102,  108,  111,    0,  110,  111,    0,
        0,  112,  109,    0,  112,  111,  110,  105,    0,    0,
      111,  112,  113,  104,    0,  114,  112,  108,  114,    0,
      113,    0,    0,  113,  109,  114,    0,    0,  115,  110,
      113,  115,  116,  111,    0,  116,    0,  114,  115,  112,
      117,    0,  116,  117,  118,  120,  119,  118,  120,  119,
      117,  116,    0,  115,  118,  120,  119,  121,  120,  114,

      121,  122,  123,  118,  122,  123,    0,  121,    0,    0,
      117,  122,  123,    0,  116,  115,  119,    0,    0,  126,
      124,  120,  126,  124,    0,  127,  118,  121,  127,  126,
      124,  125,  117,  128,  125,  127,  128,  129,  119,  124,
      129,  125,  126,  128,  125,  131,    0,  129,  131,  121,
      127,  130,  128,  132,  130,  131,  132,    0,    0,    0,
        0,  130,  124,  132,  126,    0,  133,  125,  136,  133,
      130,  136,  127,    0,  131,  128,  133,  137,  136,  136,
      137,  138,    0,    0,  138,  139,    0,  137,  139,    0,
      133,  138,  137,  130,    0,  139,  131,  140,    0,    0,

      140,  142,  136,    0,  142,  138,    0,  140,  140,    0,
        0,  142,  133,  139,  143,  137,  142,  143,  144,  145,
        0,  144,  145,    0,  143,    0,    0,  138,  144,  145,
      145,  140,    0,  146,  148,  139,  146,  148,  143,  142,
        0,    0,  147,  146,  148,  147,  149,  145,  144,  149,
        0,    0,  147,  145,    0,    0,  149,  146,    0,    0,
      143,  147,    0,  150,  148,  149,  150,    0,  151,  145,
      144,  151,  152,  150,    0,  152,  150,    0,  151,  146,
      153,    0,  152,  153,  147,    0,  148,  152,  149,    0,
      153,  156,  154,  157,  156,  154,  157,  158,  151,  150,

      158,  156,  154,  157,  153,  154,  161,  158,  162,  161,
      152,  162,  163,    0,  164,  163,  161,  164,  162,  156,
      151,    0,  163,    0,  164,    0,  153,  165,  154,  167,
      165,    0,  167,  168,    0,  161,  168,  165,    0,  167,
        0,  156,    0,  168,  169,  170,    0,  169,  170,    0,
      171,    0,  167,  171,  169,  170,  165,  161,    0,    0,
      171,  171,  172,  169,    0,  172,    0,  173,    0,  170,
      173,    0,  172,  174,  167,    0,  174,  173,  165,  175,
        0,    0,  175,  174,  171,  176,  169,  177,  176,  175,
      177,  170,  173,  178,    0,  176,  178,  177,  179,  173,

        0,  179,    0,  178,  175,    0,    0,  180,  179,    0,
      180,    0,  179,    0,  173,    0,  177,  180,  180,  182,
        0,  173,  182,  178,    0,    0,  175,  184,    0,  182,
      184,    0,    0,  185,  182,  179,  185,  184,  177,    0,
        0,  180,  184,  185,  187,  178,    0,  187,  185,  188,
      189,    0,  188,  189,  187,    0,    0,  182,  190,  188,
      189,  190,    0,  191,    0,  184,  191,    0,  190,  192,
        0,  185,  192,  191,  188,  193,    0,  190,  193,  192,
      189,    0,    0,  194,  192,  193,  194,  191,  195,    0,
        0,  195,    0,  194,  196,    0,  188,  196,  195,  193,

      190,    0,  189,  195,  196,  197,    0,  192,  197,  191,
        0,    0,    0,  196,  199,  197,    0,  199,    0,  201,
      202,  193,  201,  202,  199,    0,  195,    0,  204,  201,
      202,  204,    0,    0,    0,  197,  196,  199,  204,  205,
      206,  207,  205,  206,  207,  208,    0,    0,  208,  205,
      206,  207,  204,  209,    0,  208,  209,  197,    0,  199,
        0,    0,  211,  209,  206,  211,  210,    0,  205,  210,
      212,    0,  211,  212,  204,    0,  210,    0,    0,    0,
      212,  214,  209,    0,  214,  212,  206,    0,    0,    0,
      205,  214,  211,    0,  210,  215,  214,  216,  215,  217,

      216,    0,  217,  219,  209,  215,  219,  216,  212,  217,
        0,    0,  220,  219,  211,  220,  210,  221,  222,  214,
      221,  222,  220,    0,    0,    0,    0,  221,  222,  217,
      224,    0,  225,  224,  227,  225,  221,  227,    0,    0,
      224,  220,  225,  228,  227,  229,  228,  222,  229,    0,
        0,  217,    0,  228,  224,  229,    0,  231,    0,  221,
      231,  225,  232,  220,    0,  232,    0,  231,  228,  222,
      234,  236,  232,  234,  236,  238,  224,    0,  238,  240,
      234,  236,  240,  225,    0,  238,    0,  231,    0,  240,
      228,    0,    0,    0,  234,    0,    0,    0,    0,    0,

      236,    0,    0,    0,    0,    0,    0,    0,    0,  231,
        0,    0,    0,    0,    0,    0,  234,    0,    0,    0,
        0,    0,  236,  246,    0,  246,  246,  248,  248,  249,
      249,  245,  245,  245,  245,  245,  245,  245,  245,  245,
      245,  245,  245,  245,  245,  245,  245,  245,  245,  245,
      245,  245,  245,  245,  245,  245,  245,  245,  245,  245,
      245,  245,  245,  245,  245,  245,  245,  245,  245,  245,
      245,  245,  245,  245,  245,  245,  245,  245,  245,  245,
      245,  245,  245,  245,  245,  245,  245,  245,  245,  245,
      245,  245,  245,  245,  245,  245,  245

    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int pddl__flex_debug;
int pddl__flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *pddl_text;
#line 1 "parser.lex"
/*
 * CPT - a Constraint Programming Temporal planner
 *
 * File : parser.lex
 *
 * Copyright (C) 2005, 2006  Vincent Vidal <Vincent.Vidal@onera.fr>
 */
#line 12 "parser.lex"
#include "cpt.h"
#include "pddl.h"
#include "parser.tab.hpp"

#define YY_NO_INPUT
#define YY_DECL int pddl_lex(PDDLDomain *domain)

static int lineno = 1;
#line 887 "/home/stolba/planners/PAH2014_local/yahsp3/cpt-yahsp/release/src/parser.yy.cpp"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int pddl_lex_destroy (void );

int pddl_get_debug (void );

void pddl_set_debug (int debug_flag  );

YY_EXTRA_TYPE pddl_get_extra (void );

void pddl_set_extra (YY_EXTRA_TYPE user_defined  );

FILE *pddl_get_in (void );

void pddl_set_in  (FILE * in_str  );

FILE *pddl_get_out (void );

void pddl_set_out  (FILE * out_str  );

int pddl_get_leng (void );

char *pddl_get_text (void );

int pddl_get_lineno (void );

void pddl_set_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int pddl_wrap (void );
#else
extern int pddl_wrap (void );
#endif
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( pddl_text, pddl_leng, 1, pddl_out )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( pddl_in )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( pddl_in ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, pddl_in))==0 && ferror(pddl_in)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(pddl_in); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int pddl_lex (void);

#define YY_DECL int pddl_lex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after pddl_text and pddl_leng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 22 "parser.lex"


#line 1075 "/home/stolba/planners/PAH2014_local/yahsp3/cpt-yahsp/release/src/parser.yy.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! pddl_in )
			pddl_in = stdin;

		if ( ! pddl_out )
			pddl_out = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			pddl_ensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				pddl__create_buffer(pddl_in,YY_BUF_SIZE );
		}

		pddl__load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of pddl_text. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 246 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 245 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 24 "parser.lex"
return DEFINE_TOK;
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 25 "parser.lex"
return DOMAIN_TOK;
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 26 "parser.lex"
return REQUIREMENTS_TOK;
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 27 "parser.lex"
return TYPES_TOK;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 28 "parser.lex"
return CONSTANTS_TOK;
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 29 "parser.lex"
return PREDICATES_TOK;
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 30 "parser.lex"
return FUNCTIONS_TOK;
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 31 "parser.lex"
return PROBLEM_TOK;
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 32 "parser.lex"
return DOMNAME_TOK;
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 33 "parser.lex"
return OBJECTS_TOK;
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 34 "parser.lex"
return GOAL_TOK;
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 35 "parser.lex"
return INIT_TOK;
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 36 "parser.lex"
return METRIC_TOK;
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 37 "parser.lex"
return ACTION_TOK;
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 38 "parser.lex"
return ACTION_TOK;
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 39 "parser.lex"
return PARAMETERS_TOK;
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 40 "parser.lex"
return VARS_TOK;
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 41 "parser.lex"
return DURATION_TOK;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 42 "parser.lex"
return REAL_DURATION_TOK;
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 43 "parser.lex"
return PRECONDITION_TOK;
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 44 "parser.lex"
return PRECONDITION_TOK;
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 45 "parser.lex"
return EFFECT_TOK;
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 46 "parser.lex"
return CONSTRAINTS_TOK;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 47 "parser.lex"
return EITHER_TOK;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 48 "parser.lex"
return AND_TOK;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 49 "parser.lex"
return NOT_TOK;
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 50 "parser.lex"
return EQ_TOK;
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 51 "parser.lex"
return LTE_TOK;
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 52 "parser.lex"
return GTE_TOK;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 53 "parser.lex"
return LT_TOK;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 54 "parser.lex"
return GT_TOK;
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 55 "parser.lex"
return INC_TOK;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 56 "parser.lex"
return DEC_TOK;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 57 "parser.lex"
return ASS_TOK;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 58 "parser.lex"
return ADD_TOK;
	YY_BREAK
case 36:
/* rule 36 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up pddl_text */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up pddl_text again */
YY_RULE_SETUP
#line 59 "parser.lex"
return SUB_TOK;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 60 "parser.lex"
return MUL_TOK;
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 61 "parser.lex"
return DIV_TOK;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 62 "parser.lex"
return FAM_TOK;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 63 "parser.lex"
return LP;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 64 "parser.lex"
return RP;
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 65 "parser.lex"
return ATSTART_TOK;
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 66 "parser.lex"
return ATEND_TOK;
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 67 "parser.lex"
return OVERALL_TOK;
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 68 "parser.lex"
{ pddl_lval.string = symbol_insert(domain, pddl_text); return NAME_TOK; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 69 "parser.lex"
{ pddl_lval.string = symbol_insert(domain, pddl_text); return NUMBER_TOK; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 70 "parser.lex"

	YY_BREAK
case 48:
/* rule 48 can match eol */
YY_RULE_SETUP
#line 71 "parser.lex"
lineno++;
	YY_BREAK
case 49:
/* rule 49 can match eol */
YY_RULE_SETUP
#line 72 "parser.lex"

	YY_BREAK
case 50:
YY_RULE_SETUP
#line 73 "parser.lex"
{ }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 75 "parser.lex"
ECHO;
	YY_BREAK
#line 1415 "/home/stolba/planners/PAH2014_local/yahsp3/cpt-yahsp/release/src/parser.yy.cpp"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed pddl_in at a new source and called
			 * pddl_lex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = pddl_in;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( pddl_wrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * pddl_text, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of pddl_lex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					pddl_realloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			pddl_restart(pddl_in  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) pddl_realloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 246 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 246 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 245);

	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					pddl_restart(pddl_in );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( pddl_wrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve pddl_text */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void pddl_restart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        pddl_ensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            pddl__create_buffer(pddl_in,YY_BUF_SIZE );
	}

	pddl__init_buffer(YY_CURRENT_BUFFER,input_file );
	pddl__load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void pddl__switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		pddl_pop_buffer_state();
	 *		pddl_push_buffer_state(new_buffer);
     */
	pddl_ensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	pddl__load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (pddl_wrap()) processing, but the only time this flag
	 * is looked at is after pddl_wrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void pddl__load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	pddl_in = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE pddl__create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) pddl_alloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in pddl__create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) pddl_alloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in pddl__create_buffer()" );

	b->yy_is_our_buffer = 1;

	pddl__init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with pddl__create_buffer()
 * 
 */
    void pddl__delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		pddl_free((void *) b->yy_ch_buf  );

	pddl_free((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a pddl_restart() or at EOF.
 */
    static void pddl__init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	pddl__flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then pddl__init_buffer was _probably_
     * called from pddl_restart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void pddl__flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		pddl__load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void pddl_push_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	pddl_ensure_buffer_stack();

	/* This block is copied from pddl__switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from pddl__switch_to_buffer. */
	pddl__load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void pddl_pop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	pddl__delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		pddl__load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void pddl_ensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)pddl_alloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in pddl_ensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)pddl_realloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in pddl_ensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE pddl__scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) pddl_alloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in pddl__scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	pddl__switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to pddl_lex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       pddl__scan_bytes() instead.
 */
YY_BUFFER_STATE pddl__scan_string (yyconst char * yystr )
{
    
	return pddl__scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to pddl_lex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE pddl__scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) pddl_alloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in pddl__scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = pddl__scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in pddl__scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up pddl_text. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		pddl_text[pddl_leng] = (yy_hold_char); \
		(yy_c_buf_p) = pddl_text + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		pddl_leng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int pddl_get_lineno  (void)
{
        
    return pddl_lineno;
}

/** Get the input stream.
 * 
 */
FILE *pddl_get_in  (void)
{
        return pddl_in;
}

/** Get the output stream.
 * 
 */
FILE *pddl_get_out  (void)
{
        return pddl_out;
}

/** Get the length of the current token.
 * 
 */
int pddl_get_leng  (void)
{
        return pddl_leng;
}

/** Get the current token.
 * 
 */

char *pddl_get_text  (void)
{
        return pddl_text;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void pddl_set_lineno (int  line_number )
{
    
    pddl_lineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see pddl__switch_to_buffer
 */
void pddl_set_in (FILE *  in_str )
{
        pddl_in = in_str ;
}

void pddl_set_out (FILE *  out_str )
{
        pddl_out = out_str ;
}

int pddl_get_debug  (void)
{
        return pddl__flex_debug;
}

void pddl_set_debug (int  bdebug )
{
        pddl__flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from pddl_lex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    pddl_in = stdin;
    pddl_out = stdout;
#else
    pddl_in = (FILE *) 0;
    pddl_out = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * pddl_lex_init()
     */
    return 0;
}

/* pddl_lex_destroy is for both reentrant and non-reentrant scanners. */
int pddl_lex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		pddl__delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		pddl_pop_buffer_state();
	}

	/* Destroy the stack itself. */
	pddl_free((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * pddl_lex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *pddl_alloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *pddl_realloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void pddl_free (void * ptr )
{
	free( (char *) ptr );	/* see pddl_realloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 75 "parser.lex"



int parser_get_lineno(void)
{
  return lineno;
}

void parser_reset_lineno(void)
{
  lineno = 1;
}


